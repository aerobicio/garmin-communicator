;(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
(function() {
  var Communicator, Device, Plugin, XMLParser,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __slice = [].slice;

  Device = require('../src/device').Device;

  Plugin = require('../src/plugin').Plugin;

  XMLParser = require('../src/utils/xmlparser').XMLParser;

  exports.Communicator = Communicator = (function() {
    "use strict";
    function Communicator() {
      this.devices = __bind(this.devices, this);
      this.plugin = new Plugin();
      this.pluginProxy = this.plugin.el;
    }

    Communicator.prototype.invoke = function() {
      var args, fn, name;
      name = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      fn = this.pluginProxy[name];
      if ((fn != null) && typeof fn === 'function') {
        return fn(args);
      } else {
        throw new Error("'" + name + "' function does not exist!");
      }
    };

    Communicator.prototype.busy = function(value) {
      if (value != null) {
        this._busy = value;
      }
      return this._busy || false;
    };

    Communicator.prototype.isLocked = function() {
      return this.pluginProxy.Locked;
    };

    Communicator.prototype.unlock = function() {
      if (this.isLocked()) {
        return true;
      }
    };

    Communicator.prototype.devices = function() {
      var deferred,
        _this = this;
      if (!this.busy()) {
        this.busy(true);
        this.unlock();
        deferred = Q.defer();
        deferred.promise["finally"](function() {
          return _this.busy(false);
        });
        this._findDevices(deferred);
        return deferred.promise;
      }
    };

    Communicator.prototype._findDevices = function(deferred) {
      this.invoke('StartFindDevices');
      return this._loopUntilFinishedFindingDevices(deferred);
    };

    Communicator.prototype._loopUntilFinishedFindingDevices = function(deferred) {
      var _this = this;
      if (this.invoke('FinishFindDevices')) {
        return deferred.resolve(this._parseDeviceXml());
      } else {
        return setTimeout((function() {
          return _this._loopUntilFinishedFindingDevices(deferred);
        }), 100);
      }
    };

    Communicator.prototype._parseDeviceXml = function() {
      var xml,
        _this = this;
      xml = XMLParser.parse(this.invoke('DevicesXmlString'));
      return _(xml.getElementsByTagName("Device")).map(function(device) {
        var name, number;
        name = device.getAttribute("DisplayName");
        number = parseInt(device.getAttribute("Number"));
        return new Device(_this, number, name);
      });
    };

    return Communicator;

  })();

}).call(this);

/*
//@ sourceMappingURL=communicator.map
*/

},{"../src/device":2,"../src/plugin":6,"../src/utils/xmlparser":7}],2:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
(function() {
  var Device, Reader, XMLParser;

  Reader = require('../src/device/reader').Reader;

  XMLParser = require('../src/utils/xmlparser').XMLParser;

  exports.Device = Device = (function() {
    "use strict";
    Device.prototype.FitnessTypes = {
      Activities: ['FitnessHistory', 'FitnessDirectory'],
      Workouts: ['FitnessWorkouts', 'FitnessData'],
      Courses: ['FitnessCourses', 'FitnessData'],
      Goals: ['FitnessActivityGoals', 'FitnessData'],
      Profile: ['FitnessUserProfile', 'FitnessData'],
      FITActivities: ['FIT_TYPE_4', 'FITDirectory']
    };

    function Device(communicator, number, name) {
      this.communicator = communicator;
      this.number = number;
      this.name = name;
      this.deviceDescriptionXml = this._getDeviceDescriptionXml();
      this._setDeviceInfo();
      this._setDeviceCapabilities();
      this._createDeviceAccessors();
    }

    Device.prototype._setDeviceCapabilities = function() {
      return _.each(this.FitnessTypes, function(data, type) {
        this["canRead" + type] = this._canXY('Output', data[0]);
        return this["canWrite" + type] = this._canXY('Input', data[0]);
      }, this);
    };

    Device.prototype._createDeviceAccessors = function() {
      return _.each(this.FitnessTypes, function(data, type) {
        this["read" + type] = this._reader(type, data[0], data[1]);
        return this["write" + type] = this._writer();
      }, this);
    };

    Device.prototype._reader = function(type, dataType, pluginMethod) {
      return function() {
        var reader;
        if (!this["canRead" + type]) {
          throw new Error("read" + type + " is not supported on this device");
        }
        reader = new Reader(this.communicator, dataType, pluginMethod);
        return reader.perform();
      };
    };

    Device.prototype._writer = function() {
      return function() {
        throw new Error("Not implemented");
      };
    };

    Device.prototype._canXY = function(method, dataTypeName) {
      var transferDirection, _ref, _ref1;
      transferDirection = (_ref = this._getDataTypeNodeForDataTypeName(dataTypeName)) != null ? (_ref1 = _ref.getElementsByTagName("File")[0]) != null ? _ref1.getElementsByTagName("TransferDirection")[0].textContent : void 0 : void 0;
      return (transferDirection != null) && new RegExp(method).test(transferDirection);
    };

    Device.prototype._getDataTypeNodeForDataTypeName = function(name) {
      var dataTypesXml;
      dataTypesXml = this._getDeviceDataTypesXml();
      if (dataTypesXml) {
        return _.filter(dataTypesXml, function(node) {
          return name === node.getElementsByTagName("Name")[0].textContent;
        })[0];
      }
    };

    Device.prototype._getDeviceDataTypesXml = function() {
      var _ref, _ref1;
      return this._deviceDataTypes || (this._deviceDataTypes = (_ref = this.deviceDescriptionXml) != null ? (_ref1 = _ref.getElementsByTagName("MassStorageMode")[0]) != null ? _ref1.getElementsByTagName("DataType") : void 0 : void 0);
    };

    Device.prototype._setDeviceInfo = function() {
      this.id = this._deviceId();
      this.name = this._deviceDisplayName();
      this.partNumber = this._devicePartNumber();
      return this.softwareVersion = this._softwareVersion();
    };

    Device.prototype._getDeviceDescriptionXml = function() {
      var xml;
      xml = this.communicator.invoke('DeviceDescription', this.number);
      return XMLParser.parse(xml);
    };

    Device.prototype._deviceId = function() {
      return this.deviceDescriptionXml.getElementsByTagName("Id")[0].textContent;
    };

    Device.prototype._deviceDisplayName = function() {
      var model;
      model = this.deviceDescriptionXml.getElementsByTagName("Model")[0];
      if (model.getElementsByTagName("DisplayName").length) {
        return model.getElementsByTagName("DisplayName")[0].textContent;
      } else {
        return model.getElementsByTagName("Description")[0].textContent;
      }
    };

    Device.prototype._devicePartNumber = function() {
      return this.deviceDescriptionXml.getElementsByTagName("Model")[0].getElementsByTagName("PartNumber")[0].textContent;
    };

    Device.prototype._softwareVersion = function() {
      return this.deviceDescriptionXml.getElementsByTagName("Model")[0].getElementsByTagName("SoftwareVersion")[0].textContent;
    };

    return Device;

  })();

}).call(this);

/*
//@ sourceMappingURL=device.map
*/

},{"../src/device/reader":4,"../src/utils/xmlparser":7}],3:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
(function() {
  var Accessor;

  exports.Accessor = Accessor = (function() {
    "use strict";
    function Accessor(communicator, device, dataType, pluginMethod) {
      this.communicator = communicator;
      this.device = device;
      this.dataType = dataType;
      this.pluginMethod = pluginMethod;
    }

    Accessor.prototype.perform = function() {
      this.deferred = Q.defer();
      if (this.communicator.busy()) {
        throw new Error("Plugin is busy");
      }
      return this.communicator.invoke(this._callableNameForAction(), this.device.number, this.dataType);
    };

    Accessor.prototype._callableNameForAction = function() {
      return "Start" + this.action + this.pluginMethod;
    };

    return Accessor;

  })();

}).call(this);

/*
//@ sourceMappingURL=accessor.map
*/

},{}],4:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
(function() {
  var Accessor, Reader, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Accessor = require('./accessor').Accessor;

  exports.Reader = Reader = (function(_super) {
    __extends(Reader, _super);

    "use strict";

    function Reader() {
      _ref = Reader.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Reader.prototype.action = 'Read';

    Reader.prototype.perform = function() {
      Reader.__super__.perform.apply(this, arguments);
      return this.deferred.promise;
    };

    return Reader;

  })(Accessor);

}).call(this);

/*
//@ sourceMappingURL=reader.map
*/

},{"./accessor":3}],5:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
(function() {
  var Communicator, Garmin;

  Communicator = require('../src/communicator').Communicator;

  exports.Garmin = Garmin = (function() {
    Garmin.defaultUnlockCodes = ["file:///", "cb1492ae040612408d87cc53e3f7ff3c", "http://localhost", "45517b532362fc3149e4211ade14c9b2", "http://127.0.0.1", "40cd4860f7988c53b15b8491693de133"];

    function Garmin(options) {}

    return Garmin;

  })();

}).call(this);

/*
//@ sourceMappingURL=garmin.map
*/

},{"../src/communicator":1}],6:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
(function() {
  var Plugin;

  exports.Plugin = Plugin = (function() {
    "use strict";
    function Plugin() {
      this.el || (this.el = this._createPluginEl());
      this._checkIsInstalled();
    }

    Plugin.prototype._createPluginEl = function() {
      if (this._smellsLikeIE()) {
        return this._createIEPlugin();
      } else {
        return this._createVanillaPlugin();
      }
    };

    Plugin.prototype._checkIsInstalled = function() {
      if (this.el.Unlock == null) {
        throw new Error("Garmin Communicator plugin not installed");
      }
    };

    Plugin.prototype._smellsLikeIE = function() {
      return window.ActiveXObject == null;
    };

    Plugin.prototype._createVanillaPlugin = function() {
      var comm, comm_wrapper;
      comm_wrapper = document.createElement('div');
      comm_wrapper.style.width = 0;
      comm_wrapper.style.height = 0;
      comm = document.createElement('object');
      comm.id = "GarminNetscapePlugin";
      comm.height = 0;
      comm.width = 0;
      comm.setAttribute("type", "application/vnd-garmin.mygarmin");
      comm_wrapper.appendChild(comm);
      document.body.appendChild(comm_wrapper);
      return comm;
    };

    Plugin.prototype._createIEPlugin = function() {
      var comm;
      comm = document.createElement('object');
      comm.id = "GarminActiveXControl";
      comm.style.width = 0;
      comm.style.height = 0;
      comm.style.visibility = "hidden";
      comm.height = 0;
      comm.width = 0;
      comm.setAttribute("classid", "CLSID:099B5A62-DE20-48C6-BF9E-290A9D1D8CB5");
      document.body.appendChild(comm);
      return comm;
    };

    return Plugin;

  })();

}).call(this);

/*
//@ sourceMappingURL=plugin.map
*/

},{}],7:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
(function() {
  var XMLParser;

  exports.XMLParser = XMLParser = (function() {
    "use strict";
    function XMLParser() {}

    XMLParser.parse = function(xml) {
      if (!this._parser) {
        this._getParser();
      }
      return this._parser(xml);
    };

    XMLParser._getParser = function() {
      return this._parser = (function() {
        if (window.DOMParser != null) {
          return function(xml) {
            return new window.DOMParser().parseFromString(xml, "text/xml");
          };
        } else if ((window.ActiveXObject != null) && window.ActiveXObject("Microsoft.XMLDOM")) {
          return function(xml) {
            var xmlDoc;
            xmlDoc = new window.ActiveXObject("Microsoft.XMLDOM");
            xmlDoc.async = "false";
            return xmlDoc.loadXML(xml);
          };
        } else {
          throw new Error("No XML parser found, can’t parse XML");
        }
      })();
    };

    return XMLParser;

  })();

}).call(this);

/*
//@ sourceMappingURL=xmlparser.map
*/

},{}]},{},[2,1,6,5])
;