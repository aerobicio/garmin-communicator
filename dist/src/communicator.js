// Generated by CoffeeScript 1.6.3
(function() {
  var Communicator, Plugin, XMLParser,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __slice = [].slice;

  Plugin = require('../src/plugin').Plugin;

  XMLParser = require('../src/utils/xmlparser').XMLParser;

  exports.Communicator = Communicator = (function() {
    "use strict";
    var PrivateClass, instance;

    function Communicator() {}

    instance = null;

    Communicator.get = function() {
      return instance != null ? instance : instance = new PrivateClass;
    };

    Communicator.destroy = function() {
      return instance = null;
    };

    PrivateClass = (function() {
      function PrivateClass() {
        this.devices = __bind(this.devices, this);
        this.plugin = new Plugin();
        this.pluginProxy = this.plugin.el;
      }

      PrivateClass.prototype.invoke = function() {
        var args, fn, name;
        name = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        fn = this.pluginProxy[name];
        if ((fn != null) && typeof fn === 'function') {
          return fn.apply(this.pluginProxy, args);
        } else {
          throw new Error("'" + name + "' function does not exist!");
        }
      };

      PrivateClass.prototype.write = function(name, data) {
        if (this.pluginProxy.hasOwnProperty(name)) {
          return this.pluginProxy[name] = data;
        }
      };

      PrivateClass.prototype.read = function(name) {
        if (this.pluginProxy.hasOwnProperty(name)) {
          return this.pluginProxy[name];
        }
      };

      PrivateClass.prototype.busy = function(value) {
        if (value != null) {
          this._busy = value;
        }
        return this._busy || false;
      };

      PrivateClass.prototype.isLocked = function() {
        return this.pluginProxy.Locked;
      };

      PrivateClass.prototype.unlock = function(unlock_codes) {
        if (this.isLocked()) {
          return true;
        }
      };

      PrivateClass.prototype.devices = function() {
        var deferred,
          _this = this;
        if (!this.busy()) {
          this.busy(true);
          this.unlock();
          deferred = Q.defer();
          deferred.promise["finally"](function() {
            return _this.busy(false);
          });
          this._findDevices(deferred);
          return deferred.promise;
        }
      };

      PrivateClass.prototype._findDevices = function(deferred) {
        this.invoke('StartFindDevices');
        return this._loopUntilFinishedFindingDevices(deferred);
      };

      PrivateClass.prototype._loopUntilFinishedFindingDevices = function(deferred) {
        var _this = this;
        if (this.invoke('FinishFindDevices')) {
          return deferred.resolve(this._parseDeviceXml());
        } else {
          return setTimeout((function() {
            return _this._loopUntilFinishedFindingDevices(deferred);
          }), 100);
        }
      };

      PrivateClass.prototype._parseDeviceXml = function() {
        var Device, xml,
          _this = this;
        Device = require('../src/device').Device;
        xml = XMLParser.parse(this.invoke('DevicesXmlString'));
        return _(xml.getElementsByTagName("Device")).map(function(device) {
          var name, number;
          name = device.getAttribute("DisplayName");
          number = parseInt(device.getAttribute("Number"));
          return new Device(number, name);
        });
      };

      return PrivateClass;

    })();

    return Communicator;

  }).call(this);

}).call(this);

/*
//@ sourceMappingURL=communicator.map
*/
