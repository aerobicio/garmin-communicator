// Generated by CoffeeScript 1.6.3
(function() {
  var Communicator, Device, Reader, XMLParser;

  Communicator = require('../src/communicator').Communicator;

  Reader = require('../src/device/reader').Reader;

  XMLParser = require('../src/utils/xmlparser').XMLParser;

  exports.Device = Device = (function() {
    "use strict";
    Device.prototype.ACTIONS = {
      Activities: ['FitnessHistory', 'FitnessDirectory'],
      Workouts: ['FitnessWorkouts', 'FitnessData'],
      Courses: ['FitnessCourses', 'FitnessData'],
      Goals: ['FitnessActivityGoals', 'FitnessData'],
      Profile: ['FitnessUserProfile', 'FitnessData'],
      FITActivities: ['FIT_TYPE_4', 'FITDirectory']
    };

    function Device(number, name) {
      this.number = number;
      this.name = name;
      this.communicator = Communicator.get();
      this.deviceDescriptionXml = this._getDeviceDescriptionXml();
      this._setDeviceInfo();
      this._setDeviceCapabilities();
      this._createDeviceAccessors();
    }

    Device.prototype.activities = function() {
      if (this.canReadFITActivities) {
        return this.readFITActivities();
      } else {
        return this.readActivities();
      }
    };

    Device.prototype._setDeviceCapabilities = function() {
      return _.each(this.ACTIONS, function(data, type) {
        this["canRead" + type] = this._canXY('Output', data[0]);
        return this["canWrite" + type] = this._canXY('Input', data[0]);
      }, this);
    };

    Device.prototype._createDeviceAccessors = function() {
      return _.each(this.ACTIONS, function(data, type) {
        this["read" + type] = this._reader(type, data[0], data[1]);
        return this["write" + type] = this._writer();
      }, this);
    };

    Device.prototype._reader = function(type, dataType, pluginMethod) {
      return function() {
        var reader;
        if (!this["canRead" + type]) {
          throw new Error("read" + type + " is not supported on this device");
        }
        reader = new Reader(this, dataType, pluginMethod);
        return reader.perform();
      };
    };

    Device.prototype._writer = function() {
      return function() {
        throw new Error("Not implemented");
      };
    };

    Device.prototype._canXY = function(method, dataTypeName) {
      var transferDirection, _ref, _ref1;
      transferDirection = (_ref = this._getDataTypeNodeForDataTypeName(dataTypeName)) != null ? (_ref1 = _ref.getElementsByTagName("File")[0]) != null ? _ref1.getElementsByTagName("TransferDirection")[0].textContent : void 0 : void 0;
      return (transferDirection != null) && new RegExp(method).test(transferDirection);
    };

    Device.prototype._getDataTypeNodeForDataTypeName = function(name) {
      var dataTypesXml;
      dataTypesXml = this._getDeviceDataTypesXml();
      if (dataTypesXml) {
        return _.filter(dataTypesXml, function(node) {
          return name === node.getElementsByTagName("Name")[0].textContent;
        })[0];
      }
    };

    Device.prototype._getDeviceDataTypesXml = function() {
      var _ref, _ref1;
      return this._deviceDataTypes || (this._deviceDataTypes = (_ref = this.deviceDescriptionXml) != null ? (_ref1 = _ref.getElementsByTagName("MassStorageMode")[0]) != null ? _ref1.getElementsByTagName("DataType") : void 0 : void 0);
    };

    Device.prototype._setDeviceInfo = function() {
      this.id = this._deviceId();
      this.name = this._deviceDisplayName();
      this.partNumber = this._devicePartNumber();
      return this.softwareVersion = this._softwareVersion();
    };

    Device.prototype._getDeviceDescriptionXml = function() {
      var xml;
      xml = this.communicator.invoke('DeviceDescription', this.number);
      return XMLParser.parse(xml);
    };

    Device.prototype._deviceId = function() {
      return this.deviceDescriptionXml.getElementsByTagName("Id")[0].textContent;
    };

    Device.prototype._deviceDisplayName = function() {
      var model;
      model = this.deviceDescriptionXml.getElementsByTagName("Model")[0];
      if (model.getElementsByTagName("DisplayName").length) {
        return model.getElementsByTagName("DisplayName")[0].textContent;
      } else {
        return model.getElementsByTagName("Description")[0].textContent;
      }
    };

    Device.prototype._devicePartNumber = function() {
      return this.deviceDescriptionXml.getElementsByTagName("Model")[0].getElementsByTagName("PartNumber")[0].textContent;
    };

    Device.prototype._softwareVersion = function() {
      return this.deviceDescriptionXml.getElementsByTagName("Model")[0].getElementsByTagName("SoftwareVersion")[0].textContent;
    };

    return Device;

  })();

}).call(this);

/*
//@ sourceMappingURL=device.map
*/
