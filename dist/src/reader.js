// Generated by CoffeeScript 1.6.3
(function() {
  var Accessor, Communicator, FitFile, Reader, XMLParser, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Communicator = require('../../src/communicator').Communicator;

  Accessor = require('./accessor').Accessor;

  XMLParser = require('../utils/xmlparser').XMLParser;

  FitFile = require('../../src/fitfile').FitFile;

  exports.Reader = Reader = (function(_super) {
    __extends(Reader, _super);

    "use strict";

    function Reader() {
      this._filterFileXmlType = __bind(this._filterFileXmlType, this);
      this._fitObjectForFile = __bind(this._fitObjectForFile, this);
      _ref = Reader.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Reader.prototype.ACTION = "Read";

    Reader.prototype.FITFILE_TYPES = {
      activities: 4,
      goals: 11,
      locations: 8,
      monitoring: 9,
      profiles: 2,
      schedules: 7,
      sports: 3,
      totals: 10
    };

    Reader.prototype.perform = function() {
      this._clearDeviceXmlBuffers();
      Reader.__super__.perform.apply(this, arguments);
      return this.deferred.promise;
    };

    Reader.prototype._clearDeviceXmlBuffers = function() {
      Communicator.get().write("TcdXml", "");
      return Communicator.get().write("DirectoryListingXml", "");
    };

    Reader.prototype._onFinished = function(deferred) {
      deferred.notify({
        percent: 100
      });
      return deferred.resolve(this._loadDataFromDirectory());
    };

    Reader.prototype._loadDataFromDirectory = function() {
      switch (this.pluginMethod) {
        case 'FitnessDirectory':
          return Communicator.get().read("TcdXml");
        case 'FITDirectory':
          return this._parseFitDirectory();
      }
    };

    Reader.prototype._parseFitDirectory = function() {
      var xml;
      xml = XMLParser.parse(this._getFitDirectoryXml());
      return _.chain(xml.getElementsByTagName("File")).filter(this._filterFileXmlType).map(this._fitObjectForFile).value();
    };

    Reader.prototype._fitObjectForFile = function(file) {
      var date, id, path, type;
      id = this._getIdForFile(file);
      type = this._getTypeDescriptionForFile(file);
      date = this._getDateObjectForFile(file);
      path = this._getPathForFile(file);
      return new FitFile(this.device, id, type, date, path);
    };

    Reader.prototype._filterFileXmlType = function(file) {
      return this._getTypeDescriptionForFile(file) === this.FITFILE_TYPES.activities;
    };

    Reader.prototype._getFitDirectoryXml = function() {
      return Communicator.get().read("DirectoryListingXml");
    };

    Reader.prototype._getIdForFile = function(fileXml) {
      return fileXml.getElementsByTagName("FitId")[0].getElementsByTagName("Id")[0].textContent;
    };

    Reader.prototype._getDateObjectForFile = function(fileXml) {
      var formattedDateString;
      this.REPLACE_DATE_DASHES_REGEX || (this.REPLACE_DATE_DASHES_REGEX = /-/g);
      this.REPLACE_DATE_TZ_REGEX || (this.REPLACE_DATE_TZ_REGEX = /[TZ]/g);
      formattedDateString = fileXml.getElementsByTagName("CreationTime")[0].textContent.replace(this.REPLACE_DATE_DASHES_REGEX, "/").replace(this.REPLACE_DATE_TZ_REGEX, " ");
      return new Date(formattedDateString);
    };

    Reader.prototype._getTypeDescriptionForFile = function(fileXml) {
      return parseInt(fileXml.getElementsByTagName("FitId")[0].getElementsByTagName("FileType")[0].textContent);
    };

    Reader.prototype._getPathForFile = function(file) {
      return file.getAttribute("Path");
    };

    return Reader;

  })(Accessor);

}).call(this);

/*
//@ sourceMappingURL=reader.map
*/
